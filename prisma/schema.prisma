// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  username  String    @unique
  password  String    @db.Char(60)
  developer String    @default("Front-End Developer")
  image     String?
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  stacks    Stacks[]
  Likes     Likes[]
  Comment   Comment[]
}

model Stacks {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  published   Boolean   @default(false)
  title       String    @db.VarChar(255)
  author      User?     @relation(fields: [authorId], references: [id])
  authorId    String?
  description String
  comment     Comment[]
  languages   String[]
  likes       Likes[]
  images      String
  website     String?
}

model Likes {
  id        String   @id @default(cuid())
  stacksId  String
  stacks    Stacks   @relation(fields: [stacksId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id             String   @id @default(cuid())
  profilePicture String?
  body           String
  stacksId       String
  stacks         Stacks   @relation(fields: [stacksId], references: [id])
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}
